; LICENSE: CC0-1.0 <https://creativecommons.org/publicdomain/zero/1.0/deed.ja>

#packopt name "toast_clock"
#packopt hide 1

#include "kernel32.as" ; CreateMutex のため
#include "user32.as" ; GetForegroundWindow のため

; ------------------------------------------------
; 定数
; ------------------------------------------------

; 1時間 (millis)
#const k_hour (60 * 60 * 1000)
; 1分 (millis)
#const k_min (60 * 1000)
; 1秒 (millis)
#const k_sec 1000

; ポップアップのウィンドウID
#const k_wid 2

; ================================================

*start

	; 多重起動を防止する <http://lhsp.s206.xrea.com/hsp_system.html#5>
	; (Global\ をつけることで、システム全体で唯一のミューテックスにする)
	; <https://learn.microsoft.com/ja-jp/windows/win32/termserv/kernel-object-namespaces>
	CreateMutex 0, 0, "Global\\toast_clock"
	GetLastError
	if stat == 0x00B7 { ; ERROR_ALREADY_EXISTS
		dialog "toast_clock はすでに実行中です", 1, "toast_clock"
		end 1
	}

	; 変数を初期化する
#ifdef _DEBUG
	; 10秒ごと
	s_interval = 10 * k_sec
#else
	; 30分ごと
	s_interval = 30 * k_min
#endif

	; 色相(hue)のテーブル
	; 色相の値は0が赤、60ぐらいが緑、120ぐらいが青、最大値は191
	s_hue = 120
	s_hue_len = 5
	dim s_hue_t, s_hue_len
	ddim s_hue_h, s_hue_len
	s_hue_t(1) = 7 * k_hour ; 朝 7:00, 赤
	s_hue_h(1) = 0.0
	s_hue_t(2) = 15 * k_hour ; 昼 15:00, 緑
	s_hue_h(2) = 60.0
	s_hue_t(3) = 23 * k_hour ; 夜 23:00, 青
	s_hue_h(3) = 120.0
	s_hue_t(4) = 24 * k_hour
	s_hue_h(4) = 120.0 + (190.0 - 120) / 8 ; 23:00〜7:00 の1時間分進む
	s_hue_t(0) = 0
	s_hue_h(0) = s_hue_h(4)

	; ポップアップのウィンドウを用意する
	bgscr k_wid, 200, 80, screen_hide
	title "toast_clock"
	font "Cascadia Mono", 36, font_bold

	oncmd gosub *on_key_up, 0x101 ; WM_KEYUP
	oncmd gosub *on_lbutton_up, 0x202 ; WM_LBUTTONUP

	goto *main

; メインループ
*main

	; 現在時刻 (ミリ秒単位)
	s_millis = gettime(4) * k_hour + gettime(5) * k_min + gettime(6) * k_sec + gettime(7)

	; 次にポップアップを出す時間 (インターバルの倍数に切り上げる)
	s_next = (s_millis / s_interval + 1) * s_interval

	; 次の待機時間
	; (日付が変わる場合は 24:00:00 まで待つ)
	if s_next > 24 * k_hour {
		s_wait = 24 * k_hour - s_millis
		s_skip = 1
	} else {
		s_wait = s_next - s_millis
		s_skip = 0
	}

	logmes "now  = " + debug_time(s_millis)
	logmes "next = " + debug_time(s_next)
	logmes "wait = " + debug_time(s_wait)

	; 時間が来るまで待つ
	wait s_wait / 10
	if s_skip : goto *main

	; ポップアップを表示する
	logmes "showing"
	gsel k_wid, 2 ; 最前面に表示

	s_dismiss = 0
	s_win_dy = -20 ; Y座標

#ifdef _DEBUG
	s_millis = gettime(4) * k_hour + gettime(5) * k_min + gettime(6) * k_sec + gettime(7)
	; s_millis = 12 * k_hour + 30 * k_min ; 12:30:00
#endif

	repeat 600 ; 最大10秒間、600フレーム
		if s_dismiss : break

#ifdef _DEBUG
		s_millis = (s_millis + 16) \ (24 * k_hour)
#else
		s_millis = gettime(4) * k_hour + gettime(5) * k_min + gettime(6) * k_sec + gettime(7)
#endif

		width , , ginfo_dispx - ginfo_sizex - 8, ginfo_dispy - ginfo_sizey - 8 - s_win_dy
		if s_win_dy < 40 {
			s_win_dy += 2 ; 上に移動するアニメーション
		}

		; 時間から色相を計算する
		repeat s_hue_len
			; s_hue_t(cnt) <= it && it <= s_hue_t(cnt + 1) となる cnt をみつける
			if s_millis <= s_hue_t(cnt + 1) {
				; 区間内での進行度 (p = (x - a)/(b - a))
				s_progress = double(s_millis - s_hue_t(cnt)) / (s_hue_t(cnt + 1) - s_hue_t(cnt))
				; 区間内での位置 s_progress における色相 (h = (b - a)・p + a)
				s_hue = int((s_hue_h(cnt + 1) - s_hue_h(cnt)) * s_progress + s_hue_h(cnt))
				break
			}
		loop

		s_border_val = 0x9D ; 明るさ
		s_bg_val = 0xFD
		s_fg_val = 0x33

		s_active = GetForegroundWindow() == hwnd
		if s_active == 0 { ; 非アクティブなら暗め
			s_border_val = int(0.8 * s_border_val)
			s_bg_val = int(0.8 * s_bg_val)
			s_fg_val = int(0.8 * s_fg_val)
		}

		redraw 2
		hsvcolor s_hue, 0xF3, s_border_val ; 縁 (border)
		boxf

		hsvcolor s_hue, 0x66, s_bg_val ; 背景 (background)
		boxf 1, 1, ginfo_winx - 2, ginfo_winy - 2

		pos 17, 14
		hsvcolor s_hue, 0xF3, s_fg_val ; 文字 (foreground)
		mes time_to_string(s_millis)
		redraw

		await 16 ; 1000/60
	loop

	logmes "hidden"
	gsel k_wid, -1 ; 非表示にする

	goto *main

*on_lbutton_up

	logmes "on_lbutton_up"
	s_dismiss = 1
	return

*on_key_up

	logmes strf("on_key_up 0x%02X", wparam)

	; 0x0D: VK_RETURN (Enter)
	; 0x1B: VK_ESCAPE (Esc)
	if wparam == 0x0D || wparam == 0x1B {
		s_dismiss = 1
	}
	return

; ================================================

#module

; 時刻を "H:mm:ss" 形式の文字列にする (表示用)
#defcfunc time_to_string int tick, \
	local t, local h, local mi, local s

	t = tick / 1000
	s = t \ 60 : t /= 60 ; 秒
	mi = t \ 60 : t /= 60 ; 分
	h = t ; 時
	return strf("%2d:%02d:%02d", h, mi, s)

; 時刻を "H:mm:ss.fff" 形式の文字列にする (デバッグ用)
#defcfunc debug_time int tick, \
	local t, local h, local mi, local s, local ms

	t = tick
	ms = t \ 1000 : t /= 1000
	s = t \ 60 : t /= 60
	mi = t \ 60 : t /= 60
	h = t
	return strf("%02d:%02d:%02d.%03d", h, mi, s, ms)

#global
